name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock bandit mypy black flake8

    - name: Code formatting check (Black)
      run: |
        black --check --diff .

    - name: Linting (flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type checking (mypy)
      run: |
        mypy models_refactored data utils --ignore-missing-imports || true

    - name: Security scanning (bandit)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium

    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=models_refactored --cov=data --cov=utils --cov=api --cov-report=xml --cov-report=term-missing --cov-fail-under=60

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  quality-gate:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov radon

    - name: Code complexity check
      run: |
        radon cc . --min=B --show-complexity

    - name: Test coverage check
      run: |
        pytest tests/ --cov=models_refactored --cov=data --cov=utils --cov=api --cov-fail-under=60

    - name: Performance regression test
      run: |
        python -m pytest tests/performance/ -v || echo "Performance tests not found, skipping"

  build:
    needs: [test, quality-gate]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build application
      run: |
        python -c "import sys; print('Python version:', sys.version); print('Build successful')"

    - name: Create deployment artifact
      run: |
        tar -czf clstock-${{ github.sha }}.tar.gz \
          models_refactored/ data/ utils/ config/ api/ \
          requirements.txt menu.py

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: clstock-build
        path: clstock-${{ github.sha }}.tar.gz

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: clstock-build

    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        # Add actual deployment commands here
        echo "ClStock deployment completed successfully"